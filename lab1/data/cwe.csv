idx,ID,Name,Description,ExtendedDescription,RelatedWeaknesses,DemonstrativeExamples
0,20,Improper Input Validation,"The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly.","Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. Input can consist of: - raw data - strings, numbers, parameters, file contents, etc. - metadata - information about the raw data, such as headers or size Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Many properties of raw data or metadata may need to be validated upon entry into the code, such as: - specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. - implied or derived quantities, such as the actual size of a file instead of a specified size - indexes, offsets, or positions into more complex data structures - symbolic keys or other elements into hash tables, associative arrays, etc. - well-formedness, i.e. syntactic correctness - compliance with expected syntax - lexical token correctness - compliance with rules for what is treated as a token - specified or derived type - the actual type of the input (or what the input appears to be) - consistency - between individual data elements, between raw data and metadata, between references, etc. - conformance to domain-specific rules, e.g. business logic - equivalence - ensuring that equivalent inputs are treated the same - authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation.","ChildOf:707, PeerOf:345, CanPrecede:22, CanPrecede:41, CanPrecede:74, CanPrecede:119, CanPrecede:770","[{""ID"": ""DX-135"", ""Entries"": [{""IntroText"": ""This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated.""}, {""Nature"": ""Bad"", ""Language"": ""Java"", ""ExampleCode"": ""```\n\t...\n\tpublic static final double price = 20.00;\n\tint quantity = currentUser.getAttribute(\""quantity\"");\n\tdouble total = price * quantity;\n\tchargeUser(total);\n\t...\n```""}, {""BodyText"": ""The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited.""}]}, {""ID"": ""DX-136"", ""Entries"": [{""IntroText"": ""This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares.""}, {""Nature"": ""Bad"", ""Language"": ""C"", ""ExampleCode"": ""```\n\t...\n\t#define MAX_DIM 100\n\t...\n```\n/* board dimensions */* \n\t\n\tint m,n, error;\n\tboard_square_t *board;\n\tprintf(\""Please specify the board height: \\n\"");\n\terror = scanf(\""%d\"", &m);\n\tif ( EOF == error ){\n\t```\n\t\tdie(\""No integer passed: Die evil hacker!\\n\"");\n\t}\n\tprintf(\""Please specify the board width: \\n\"");\n\terror = scanf(\""%d\"", &n);\n\tif ( EOF == error ){\n\t\tdie(\""No integer passed: Die evil hacker!\\n\"");\n\t}\n\tif ( m > MAX_DIM || n > MAX_DIM ) {\n\t\tdie(\""Value too large: Die evil hacker!\\n\"");\n\t}\n\tboard = (board_square_t*) malloc( m * n * sizeof(board_square_t));\n\t...\n```""}, {""BodyText"": ""While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program.""}]}, {""Entries"": [{""IntroText"": ""The following example shows a PHP application in which the programmer attempts to display a user's birthday and homepage.""}, {""Nature"": ""Bad"", ""Language"": ""PHP"", ""ExampleCode"": ""```\n\t$birthday = $_GET['birthday'];\n\t$homepage = $_GET['homepage'];\n\techo \""Birthday: $birthday<br>Homepage: <a href=$homepage>click here</a>\""\n```""}, {""BodyText"": ""The programmer intended for $birthday to be in a date format and $homepage to be a valid URL. However, since the values are derived from an HTTP request, if an attacker can trick a victim into clicking a crafted URL with <script> tags providing the values for birthday and / or homepage, then the script will run on the client's browser when the web server echoes the content. Notice that even if the programmer were to defend the $birthday variable by restricting input to integers and dashes, it would still be possible for an attacker to provide a string of the form:""}, {""Nature"": ""Attack"", ""ExampleCode"": ""```\n\t2009-01-09--\n```""}, {""BodyText"": ""If this data were used in a SQL statement, it would treat the remainder of the statement as a comment. The comment could disable other security-related logic in the statement. In this case, encoding combined with input validation would be a more useful protection mechanism.""}, {""BodyText"": ""Furthermore, an XSS (CWE-79) attack or SQL injection (CWE-89) are just a few of the potential consequences when input validation is not used. Depending on the context of the code, CRLF Injection (CWE-93), Argument Injection (CWE-88), or Command Injection (CWE-77) may also be possible.""}]}, {""ID"": ""DX-34"", ""Entries"": [{""IntroText"": ""The following example takes a user-supplied value to allocate an array of objects and then operates on the array.""}, {""Nature"": ""Bad"", ""Language"": ""Java"", ""ExampleCode"": ""```\n\tprivate void buildList ( int untrustedListSize ){\n\t\tif ( 0 > untrustedListSize ){\n\t\t\tdie(\""Negative value supplied for list size, die evil hacker!\"");\n\t\t}\n\t\tWidget[] list = new Widget [ untrustedListSize ];\n\t\tlist[0] = new Widget();\n\t}\n```""}, {""BodyText"": ""This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown.""}]}, {""ID"": ""DX-110"", ""Entries"": [{""IntroText"": ""This Android application has registered to handle a URL when sent an intent:""}, {""Nature"": ""Bad"", ""Language"": ""Java"", ""ExampleCode"": ""```\n```\n...* \n\tIntentFilter filter = new IntentFilter(\""com.example.URLHandler.openURL\"");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n\t\n\t *...* \n\t\n\tpublic class UrlHandlerReceiver extends BroadcastReceiver {\n\t```\n\t\t\t@Override\n\t\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\t\t\tif(\""com.example.URLHandler.openURL\"".equals(intent.getAction())) {\n\t\t\t\t\t\tString URL = intent.getStringExtra(\""URLToOpen\"");\n\t\t\t\t\t\tint length = URL.length();\n```\n...* \n\t\t\t\t\t}}}""}, {""BodyText"": ""The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.""}]}]"
