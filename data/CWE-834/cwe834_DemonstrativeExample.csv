cwe_id,example_id,entry_order,IntroText,Nature,Language,ExampleCode,BodyText
834,DX-204,1,In this example a mistake exists in the code where the exit condition contained in flg is never called. This results in the function calling itself over and over again until the stack is exhausted.,NULL,NULL,NULL,NULL
834,DX-204,2,NULL,Bad,C,"void do_something_recursive (int flg)
 {

```
	 ... // Do some real work here, but the value of flg is unmodified
	 if (flg) { do_something_recursive (flg); } // flg is never modified so it is always TRUE - this call will continue until the stack explodes
 }
 int flag = 1; // Set to TRUE
 do_something_recursive (flag);
```",NULL
834,DX-204,3,NULL,NULL,NULL,NULL,Note that the only difference between the Good and Bad examples is that the recursion flag will change value and cause the recursive call to return.
834,DX-204,4,NULL,Good,C,"void do_something_recursive (int flg)
 {

```
	 ... // Do some real work here
	 // Modify value of flg on done condition
	 if (flg) { do_something_recursive (flg); } // returns when flg changes to 0
 }
 int flag = 1; // Set to TRUE
 do_something_recursive (flag);
```",NULL
834,DX-205,1,"For this example, the method isReorderNeeded is part of a bookstore application that determines if a particular book needs to be reordered based on the current inventory count and the rate at which the book is being sold.",NULL,NULL,NULL,NULL
834,DX-205,2,NULL,Bad,Java,"```
	public boolean isReorderNeeded(String bookISBN, int rateSold) {
			boolean isReorder = false;
			int minimumCount = 10;
			int days = 0;
```
// get inventory count for book* 
			int inventoryCount = inventory.getIventoryCount(bookISBN);
			
			
			 *// find number of days until inventory count reaches minimum* 
			while (inventoryCount > minimumCount) {
			```
					inventoryCount = inventoryCount - rateSold;
					days++;
			}
```
// if number of days within reorder timeframe* 
			
			
			 *// set reorder return boolean to true* 
			if (days > 0 && days < 5) {
			```
				isReorder = true;
			}
			return isReorder;
	}
```",NULL
834,DX-205,3,NULL,NULL,NULL,NULL,"However, the while loop will become an infinite loop if the rateSold input parameter has a value of zero since the inventoryCount will never fall below the minimumCount. In this case the input parameter should be validated to ensure that a value of zero does not cause an infinite loop, as in the following code."
834,DX-205,4,NULL,Good,Java,"```
	public boolean isReorderNeeded(String bookISBN, int rateSold) {
			...
```
// validate rateSold variable* 
			if (rateSold < 1) {
			```
				return isReorder;
			}
			...
	}
```",NULL
