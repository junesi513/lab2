cwe_id,example_id,entry_order,IntroText,Nature,Language,ExampleCode,BodyText
703,DX-7,1,Consider the following code segment:,NULL,NULL,NULL,NULL
703,DX-7,2,NULL,Bad,C,"```
	char buf[10], cp_buf[10];
	fgets(buf, 10, stdin);
	strcpy(cp_buf, buf);
```",NULL
703,DX-7,3,NULL,NULL,NULL,NULL,"The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy()."
703,DX-198,1,The following method throws three types of exceptions.,NULL,NULL,NULL,NULL
703,DX-198,2,NULL,Good,Java,"```
	public void doExchange() throws IOException, InvocationTargetException, SQLException {
		...
	}
```",NULL
703,DX-198,3,NULL,NULL,NULL,NULL,While it might seem tidier to write
703,DX-198,4,NULL,Bad,Java,"```
	public void doExchange() throws Exception {
		...
	}
```",NULL
703,DX-198,5,NULL,NULL,NULL,NULL,"doing so hampers the caller's ability to understand and handle the exceptions that occur. Further, if a later revision of doExchange() introduces a new type of exception that should be treated differently than previous exceptions, there is no easy way to enforce this requirement."
