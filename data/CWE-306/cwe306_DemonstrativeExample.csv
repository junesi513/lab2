cwe_id,example_id,entry_order,IntroText,Nature,Language,ExampleCode,BodyText
306,GEN-1,1,In the following Java example the method createBankAccount is used to create a BankAccount object for a bank management application.,NULL,NULL,NULL,NULL
306,GEN-1,2,NULL,Bad,Java,"```
	public BankAccount createBankAccount(String accountNumber, String accountType,
	String accountName, String accountSSN, double balance) {
			BankAccount account = new BankAccount();
			account.setAccountNumber(accountNumber);
			account.setAccountType(accountType);
			account.setAccountOwnerName(accountName);
			account.setAccountOwnerSSN(accountSSN);
			account.setBalance(balance);
			return account;
	}
```",NULL
306,GEN-1,3,NULL,NULL,NULL,NULL,"However, there is no authentication mechanism to ensure that the user creating this bank account object has the authority to create new bank accounts. Some authentication mechanisms should be used to verify that the user has the authority to create bank account objects."
306,GEN-1,4,NULL,NULL,NULL,NULL,The following Java code includes a boolean variable and method for authenticating a user. If the user has not been authenticated then the createBankAccount will not create the bank account object.
306,GEN-1,5,NULL,Good,Java,"```
	private boolean isUserAuthentic = false;
```
// authenticate user,* 
	
	
	 *// if user is authenticated then set variable to true* 
	
	
	 *// otherwise set variable to false* 
	public boolean authenticateUser(String username, String password) {
	```
		...
	}
	public BankAccount createNewBankAccount(String accountNumber, String accountType,
	String accountName, String accountSSN, double balance) {
			BankAccount account = null;
			if (isUserAuthentic) {
				account = new BankAccount();
				account.setAccountNumber(accountNumber);
				account.setAccountType(accountType);
				account.setAccountOwnerName(accountName);
				account.setAccountOwnerSSN(accountSSN);
				account.setBalance(balance);
			}
			return account;
	}
```",NULL
306,DX-153,1,"In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were ""insecure by design"" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications.",NULL,NULL,NULL,NULL
306,DX-153,2,NULL,NULL,NULL,NULL,Multiple vendors did not use any authentication for critical functionality in their OT products.
306,DX-155,1,"In 2021, a web site operated by PeopleGIS stored data of US municipalities in Amazon Web Service (AWS) Simple Storage Service (S3) buckets.",NULL,NULL,NULL,NULL
306,DX-155,2,NULL,Bad,Other,"```
	A security researcher found 86 S3 buckets that could be accessed without authentication (CWE-306) and stored data unencrypted (CWE-312). These buckets exposed over 1000 GB of data and 1.6 million files including physical addresses, phone numbers, tax documents, pictures of driver's license IDs, etc. [REF-1296] [REF-1295]
```",NULL
306,DX-155,3,NULL,NULL,NULL,NULL,"While it was not publicly disclosed how the data was protected after discovery, multiple options could have been considered."
306,DX-155,4,NULL,Good,Other,"```
	The sensitive information could have been protected by ensuring that the buckets did not have public read access, e.g., by enabling the s3-account-level-public-access-blocks-periodic rule to Block Public Access. In addition, the data could have been encrypted at rest using the appropriate S3 settings, e.g., by enabling server-side encryption using the s3-bucket-server-side-encryption-enabled setting. Other settings are available to further prevent bucket data from being leaked. [REF-1297]
```",NULL
