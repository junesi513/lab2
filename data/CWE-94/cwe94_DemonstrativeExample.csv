cwe_id,example_id,entry_order,IntroText,Nature,Language,ExampleCode,BodyText
94,DX-32,1,This example attempts to write user messages to a message file and allow users to view them.,NULL,NULL,NULL,NULL
94,DX-32,2,NULL,Bad,PHP,"```
	$MessageFile = ""messages.out"";
	if ($_GET[""action""] == ""NewMessage"") {
		$name = $_GET[""name""];
		$message = $_GET[""message""];
		$handle = fopen($MessageFile, ""a+"");
		fwrite($handle, ""<b>$name</b> says '$message'<hr>\n"");
		fclose($handle);
		echo ""Message Saved!<p>\n"";
	}
	else if ($_GET[""action""] == ""ViewMessages"") {
		include($MessageFile);
	}
```",NULL
94,DX-32,3,NULL,NULL,NULL,NULL,"While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:"
94,DX-32,4,NULL,Attack,NULL,"```
	name=h4x0r
	message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E
```",NULL
94,DX-32,5,NULL,NULL,NULL,NULL,which will decode to the following:
94,DX-32,6,NULL,Attack,NULL,"```
	<?php system(""/bin/ls -l"");?>
```",NULL
94,DX-32,7,NULL,NULL,NULL,NULL,"The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages."
94,DX-32,8,NULL,NULL,NULL,NULL,Notice that XSS (CWE-79) is also possible in this situation.
94,DX-31,1,edit-config.pl: This CGI script is used to modify settings in a configuration file.,NULL,NULL,NULL,NULL
94,DX-31,2,NULL,Bad,Perl,"```
	use CGI qw(:standard);
	sub config_file_add_key {
			my ($fname, $key, $arg) = @_;
```
# code to add a field/key to a file goes here* 
			}
	
	sub config_file_set_key {
	```
			my ($fname, $key, $arg) = @_;
```
# code to set key to a particular file goes here* 
			}
	
	sub config_file_delete_key {
	```
			my ($fname, $key, $arg) = @_;
```
# code to delete key from a particular file goes here* 
			}
	
	sub handleConfigAction {
	```
			my ($fname, $action) = @_;
			my $key = param('key');
			my $val = param('val');
```
# this is super-efficient code, especially if you have to invoke* 
			
			
			
			 *# any one of dozens of different functions!* 
			
			my $code = ""config_file_$action_key(\$fname, \$key, \$val);"";
			eval($code);}
	
	$configfile = ""/home/cwe/config.txt"";
	print header;
	if (defined(param('action'))) {
	```
		handleConfigAction($configfile, param('action'));
	}
	else {
		print ""No action specified!\n"";
	}
```",NULL
94,DX-31,3,NULL,NULL,NULL,NULL,"The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:"
94,DX-31,4,NULL,Attack,NULL,"```
	add_key("","",""); system(""/bin/ls"");
```",NULL
94,DX-31,5,NULL,NULL,NULL,NULL,This would produce the following string in handleConfigAction():
94,DX-31,6,NULL,Result,NULL,"```
	config_file_add_key("","",""); system(""/bin/ls"");
```",NULL
94,DX-31,7,NULL,NULL,NULL,NULL,"Any arbitrary Perl code could be added after the attacker has ""closed off"" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the ""_key(\$fname, \$key, \$val)"" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated."
94,DX-156,1,This simple script asks a user to supply a list of numbers as input and adds them together.,NULL,NULL,NULL,NULL
94,DX-156,2,NULL,Bad,Python,"```
	 def main():
		 sum = 0
		 numbers = eval(input(""Enter a space-separated list of numbers: ""))
		 for num in numbers:
			 sum = sum + num
		 print(f""Sum of {numbers} = {sum}"") 
	 main() 
```",NULL
94,DX-156,3,NULL,NULL,NULL,NULL,"The eval() function can take the user-supplied list and convert it into a Python list object, therefore allowing the programmer to use list comprehension methods to work with the data. However, if code is supplied to the eval() function, it will execute that code. For example, a malicious user could supply the following string:"
94,DX-156,4,NULL,Attack,NULL,"```
	__import__('subprocess').getoutput('rm -r *')
```",NULL
94,DX-156,5,NULL,NULL,NULL,NULL,"This would delete all the files in the current directory. For this reason, it is not recommended to use eval() with untrusted input."
94,DX-156,6,NULL,NULL,NULL,NULL,"A way to accomplish this without the use of eval() is to apply an integer conversion on the input within a try/except block. If the user-supplied input is not numeric, this will raise a ValueError. By avoiding eval(), there is no opportunity for the input string to be executed as code."
94,DX-156,7,NULL,Good,Python,"```
	 def main():
		 sum = 0
		 numbers = input(""Enter a space-separated list of numbers: "").split("" "")
		 try:
			 for num in numbers:
				 sum = sum + int(num)
			 print(f""Sum of {numbers} = {sum}"") 
		 except ValueError:
			 print(""Error: invalid input"")
	 main() 
```",NULL
94,DX-156,8,NULL,NULL,NULL,NULL,"An alternative, commonly-cited mitigation for this kind of weakness is to use the ast.literal_eval() function, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373]."
