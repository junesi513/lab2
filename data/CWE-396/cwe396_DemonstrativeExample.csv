cwe_id,example_id,entry_order,IntroText,Nature,Language,ExampleCode,BodyText
396,GEN-1,1,The following code excerpt handles three types of exceptions in an identical fashion.,NULL,NULL,NULL,NULL
396,GEN-1,2,NULL,Good,Java,"```
	try {
		doExchange();
	}
	catch (IOException e) {
		logger.error(""doExchange failed"", e);
	}
	catch (InvocationTargetException e) {
			logger.error(""doExchange failed"", e);
	}
	catch (SQLException e) {
			logger.error(""doExchange failed"", e);
	}
```",NULL
396,GEN-1,3,NULL,NULL,NULL,NULL,"At first blush, it may seem preferable to deal with these exceptions in a single catch block, as follows:"
396,GEN-1,4,NULL,Bad,Java,"```
	try {
		doExchange();
	}
	catch (Exception e) {
		logger.error(""doExchange failed"", e);
	}
```",NULL
396,GEN-1,5,NULL,NULL,NULL,NULL,"However, if doExchange() is modified to throw a new type of exception that should be handled in some different kind of way, the broad catch block will prevent the compiler from pointing out the situation. Further, the new catch block will now also handle exceptions derived from RuntimeException such as ClassCastException, and NullPointerException, which is not the programmer's intent."
