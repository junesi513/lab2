[
    {
        "example_id": "DX-135",
        "fixed_code": "{\n\t\t...\n\t\tpublic static final double price = 20.00;\n\t\tint quantity = currentUser.getAttribute(\"quantity\");\n\t\tif (quantity < 0)\n      \t{\n      \t\tthrow new IllegalArgumentException(\"Quantity cannot be negative\");\n      \t}\n\t\tdouble total = price * quantity;\n\t\tchargeUser(total);\n\t\t...\n}",
        "description": "The vulnerability in this code is due to the lack of validation for the quantity input from the user. It allows a user to provide a negative value for quantity, which when multiplied with the price would result in a negative total. In a real-world shopping scenario, this would mean that the user account would be credited instead of debited, which is a security flaw. The fix ensures that the quantity is never negative by throwing an IllegalArgumentException if a negative value is provided by the user. This will terminate the program execution and prevent the user account from being maliciously credited."
    },
    {
        "example_id": "DX-136",
        "fixed_code": "{\n\t...\n\t#define MAX_DIM 100\n\t...\n\t/* board dimensions */*\n\t\n\tint m,n, error;\n\tboard_square_t *board;\n\tprintf(\"Please specify the board height:\\n\");\n\terror = scanf(\"%d\", &m);\n\tif ( EOF == error || m < 0 ){\n\t\tdie(\"Invalid value passed: Die evil hacker!\\n\");\n\t}\n\tprintf(\"Please specify the board width: \\n\");\n\terror = scanf(\"%d\", &n);\n\tif ( EOF == error || n < 0 ){\n\t\tdie(\"Invalid value passed: Die evil hacker!\\n\");\n\t}\n\tif ( m > MAX_DIM || n > MAX_DIM ) {\n\t\tdie(\"Value too large: Die evil hacker!\\n\");\n\t}\n\tboard = (board_square_t*) malloc( m * n * sizeof(board_square_t));\n\t...\n}",
        "description": "The initial vulnerability lies in not checking for negative values supplied by the user. Therefore, an attacker can exploit it by specifying two large negative values that don't cause an overflow, leading to a large memory allocation and potentially causing a system crash. Alternatively, extremely large negative values can lead to an integer overflow causing unpredictable behavior depending on the subsequent code. The fixed code mitigates these vulnerabilities by ensuring a check for negative values at the point where the height and width inputs are read from the user. If any input is less than zero, the code will terminate execution thereby preventing the both resource consumption attacks and integer overflows."
    },
    {
        "example_id": "GEN-3",
        "fixed_code": "<?php\n\t$birthday = htmlentities($_GET['birthday'], ENT_QUOTES, 'UTF-8');\n\t$homepage = filter_var($_GET['homepage'], FILTER_SANITIZE_URL);\n\techo \"Birthday: $birthday<br>Homepage: <a href='$homepage'>click here</a>\";\n?>",
        "description": "The original code is vulnerable to Cross-Site Scripting (XSS) and SQL Injection attacks as it directly uses input data received from the user without any sanitization or validation process. An attacker can provide a crafted URL containing malicious script or SQL commands that could lead to unintended consequences such as stealing sensitive data, modifying the website's content, or executing arbitrary SQL queries against the database.\n\nThe fixed code addresses this vulnerability by sanitizing and validating the input data before use. The 'htmlentities()' function with the 'ENT_QUOTES' flag is used to convert all applicable characters to their corresponding HTML entities. Thus, any malicious scripts provided in the 'birthday' field get neutralized as they are treated as plain text instead of executable code.\n\nThe 'filter_var()' function with the 'FILTER_SANITIZE_URL' filter is used to sanitize the 'homepage' field. This filter removes all illegal URL characters from a string. Therefore, if a malicious script or SQL command is provided, it will get stripped off, negating the possibility of an attack.\n\nPlease note as a security best practice, always validate input data on the server-side even if it is validated on the client-side because the client-side validation can be bypassed by malicious users."
    },
    {
        "example_id": "DX-34",
        "fixed_code": "{\\n\\tprivate void buildList ( int untrustedListSize ){\\n\\t\\tif ( 0 >= untrustedListSize ){\\n\\t\\t\\tdie(\\\"Non-positive value supplied for list size, die evil hacker!\\\");\\n\\t\\t}\\n\\t\\tWidget[] list = new Widget [ untrustedListSize ];\\n\\t\\tlist[0] = new Widget();\\n\\t}\\n}",
        "description": "The vulnerability in the code involves creating an array of Objects with a size obtained from an untrusted source. The initial code only checks if the value is less than 0. However, that's not sufficient as an ArrayIndexOutOfBoundsException can occur if the size is 0, when the program tries to assign a new Widget to the first spot in the array. The corrected code remedies this by altering the if condition to throw an error if the value is less than or equal to 0. This way, it ensures a positive integer is always passed to initiate the array of objects, preventing a potential crash of the program."
    },
    {
        "example_id": "DX-110",
        "fixed_code": "{\\n\\t...*\\n\\tIntentFilter filter = new IntentFilter(\\\"com.example.URLHandler.openURL\\\");\\n\\tMyReceiver receiver = new MyReceiver();\\n\\tregisterReceiver(receiver, filter);\\n\\t\\n\\t*...*\\n\\t\\n\\tpublic class UrlHandlerReceiver extends BroadcastReceiver {\\n\\t\\t@Override\\n\\t\\tpublic void onReceive(Context context, Intent intent) {\\n\\t\\t\\tif(\\\"com.example.URLHandler.openURL\\\".equals(intent.getAction())) {\\n\\t\\t\\t\\tString URL = intent.getStringExtra(\\\"URLToOpen\\\");\\n\\t\\t\\t\\tif (URL != null) {\\n\\t\\t\\t\\t\\tint length = URL.length();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}",
        "description": "The initial code does not check if the URL is null before calling the length() method which can lead to a Null Pointer Exception (NPE) - this is a major vulnerability as it can cause the program to crash. This is fixed in the revised code by including a null check before calling the length() method. If the URL is null, it skips the computation of the length, thus preventing a possible NPE."
    }
]